ggplot(d, aes( set1, set2)) +
  geom_point() +
  geom_smooth(method = lm) +
  labs(x = "MPVPLT", y = "NLR", colour="DCI") +
  guides(fill=FALSE) +
  theme(text = element_text(size=20), legend.position = c(0.92, 0.9))

ggplot(d_base, aes(x=as.factor(DD_s), y=ceov_d, fill=as.factor(DD_s))) + 
    geom_boxplot() +
    scale_x_discrete(name="Discharge Destination", breaks=c("1","2","3"), labels=c("home/rehab", "LTAC/SNF/OU Edmond", "death/hospics")) +
    scale_y_continuous(name="GBV(CeOV)") + 
    scale_fill_discrete(labels = c("home/rehab", "LTAC/SNF/OU Edmond", "death/hospics"), name="Discharge Destination") +
    theme(text = element_text(size=20), legend.position=c(0.54,0.9), legend.background=element_blank())
    
ggplot(d, aes(x=Duration, y=MC, color=time)) + 
    geom_point()+
    geom_smooth(method=lm, se=FALSE, fullrange=TRUE)+
    theme_classic()+
    xlab("Duration")+ ylab("MC")+
    scale_colour_discrete(name  ="Treatment", breaks=c("pre", "pst"),labels=c("begin", "end")) +
    theme(text = element_text(size=20), axis.text=element_text(size=14),
		        axis.title=element_text(size=14),legend.position=c(0.8,0.85))
    
# Multiple plot function
# From Winston Chang's R cookbook http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_%28ggplot2%29/
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
